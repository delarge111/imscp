#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2015 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";
use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Database;
use iMSCP::Ext2Attributes qw(setImmutable clearImmutable isImmutable);
use iMSCP::Getopt;
use File::Basename;

$ENV{'LANG'} = 'C.UTF-8';

newDebug('imscp-httpd-logs-mngr.log');

# Parse command line options
iMSCP::Getopt->parseNoDefault(sprintf("Usage: perl %s [OPTION]...", basename($0)) . qq {

Script which generate customers's httpd logs.

OPTIONS:
 -v,    --verbose       Enable verbose mode.},
 'verbose|v' => sub { setVerbose(@_); }
);

my $bootstrapper = iMSCP::Bootstrapper->getInstance();
exit unless $bootstrapper->lock('/tmp/imscp-httpd-logs-mngr.lock', 'nowait');
$bootstrapper->boot({ 'norequirements' => 'yes', 'nolock' => 'yes', 'config_readonly' => 'yes' });

sub run
{
	my $rs = 0;

	my $sql = "
		SELECT
			domain_name, domain_name AS mount_point, domain_admin_id AS admin_id
		FROM
			`domain`
		WHERE
			domain_status = 'ok'
		UNION
		SELECT
			alias_name, domain_name, domain_admin_id AS admin_id
		FROM
			domain_aliasses
		JOIN
			domain using(domain_id)
		WHERE
			alias_status = 'ok'
		UNION
		SELECT
			CONCAT(subdomain_name, '.', domain_name), domain_name AS mount_point, domain_admin_id AS admin_id
		FROM
			subdomain
		JOIN
			domain using(domain_id)
		WHERE
			subdomain_status = 'ok'
		UNION
		SELECT
			CONCAT(subdomain_alias_name, '.', alias_name), domain_name AS mount_point, domain_admin_id AS admin_id
		FROM
			subdomain_alias
		JOIN
			domain_aliasses using(alias_id)
		JOIN
			domain using(domain_id)
		WHERE
			subdomain_alias_status = 'ok'
	";
	my $rdata = iMSCP::Database->factory()->doQuery('domain_name', $sql);

	unless (ref $rdata eq 'HASH') {
		error($rdata);
		require iMSCP::Mail;
		iMSCP::Mail->new()->errmsg($rdata);
		$rs = 1;
	} else {
		require Servers::httpd;
		my $logSrcDir = Servers::httpd->factory()->{'config'}->{'HTTPD_LOG_DIR'};
		my $ret = 0;

		for(keys %{$rdata}) {
			my $groupName =
			my $userName = $main::imscpConfig{'SYSTEM_USER_PREFIX'} .
				($main::imscpConfig{'SYSTEM_USER_MIN_UID'} + $rdata->{$_}->{'admin_id'});

			my $logDestDir = "$main::imscpConfig{'USER_WEB_DIR'}/$rdata->{$_}->{'mount_point'}/logs";

			my $combinedLogSrc = "$logSrcDir/$_/access.log";
			my $combinedLogDest = "$logDestDir/$_-access.log";

			my $errorLogSrc = "$logSrcDir/$_/error.log";
			my $errorLogDest = "$logDestDir/$_-error.log";

			my $parentDir = dirname($logDestDir);
			my $isImmutableParentDir = 0;

			if(isImmutable($parentDir)) {
				$isImmutableParentDir = 1;
				clearImmutable($parentDir);
			}

			# Create customer logs directory if doesn't already exists or set its permissions
			$rs = iMSCP::Dir->new('dirname' => $logDestDir)->make(
				{ 'user' => $userName, 'group' => $groupName, 'mode' => 0750 }
			) unless -d $logDestDir;

			setImmutable($parentDir) if $isImmutableParentDir;

			unless($rs) {
				if(-f $combinedLogSrc) {
					my $file = iMSCP::File->new('filename' => $combinedLogSrc);

					$rs = $file->copyFile($combinedLogDest);

					$file->{'filename'} = $combinedLogDest;

					$rs ||= $file->owner($userName, $groupName);
					$rs ||= $file->mode(0640);
				}

				$ret ||= $rs;

				if (-f $errorLogSrc) {
					my $file = iMSCP::File->new('filename' => $errorLogSrc);

					$rs = $file->copyFile($errorLogDest);

					$file->{'filename'} = $errorLogDest;

					$rs ||= $file->owner($userName, $groupName);
					$rs ||= $file->mode(0640);
				}

				$ret ||= $rs;
			}
		}

		$rs = $ret;
	}

	$rs;
}

my $rs = run();
$bootstrapper->unlock('/tmp/imscp-httpd-logs-mngr.lock');
exit $rs;
